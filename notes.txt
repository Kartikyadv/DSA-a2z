                        Array 16th vdo
                            NOTES   

                int arr[6]; OR int arr[] = new int[6]

1. global array will be initialized with 0
    & local array will contain garbage value

2. max size of array - 10^6 locally & 10^7 globally

3. BRUTE -> BETTER -> OPTIMAL

Q-1  Largest Element in the Array

    BRUTE : (sort) -> n-1th Element                             T.C = (nlogn) S.C = (1)

    OPTIMAL: for loop chalado array p to find largest           T.C = (n) S.C = (1)
    
Q-2 2nd Largest Element in the Array

    BRUTE : (sort) -> n-2th Element                                      T.C = (nlogn) S.C = (1)

    BETTER: for loop chalado array p to find slargest != largest        T.C = (2n) S.C = (1)
    
    OPTIMAL: for loop chalo smallest & largest ko let krlo and then compare krte chalo  T.C = (n) S.C = (1)

Q-3 Check if sorted 

    OPTIMAL = a[i] < a[i-1] nahi hona chahie

Q-4 Remove duplicates from Array

    BRUTE : use set                                      T.C = (nlogn) S.C = (n)

    OPTIMAL: 2 pointer approach                          T.C = (n) S.C = (1)
    
Q-5 Left Rotate an Array by One
    
    OPTIMAL: store temp = arr[0] & shift everyone        T.C = (n) S.C = (1)

Q-6 Rotate array By D place

    BRUTE :  temp[] m [0-d] tk push krke            
             arr[] m push krdo temp[] s pop_front krke
             for(int i=n-d; i<n; i++){
                arr[i] = temp[i-(n-d)];}                 T.C = (n+d) S.C = (d)                                

    OPTIMAL: rev(a,a+d),
             rev(a+d,a+n),
             rev(a, a+n),                                T.C = (2n) S.C = (1)

Q-7 Move Zero's to End

    BRUTE :  non zeros(NZ) ko alag array m store krlo
             0-NZ tk original aray m dalo
             NZ-arr.size tk 0 bhardo                     T.C = (2n) S.C = (n)                                

    OPTIMAL: 2 pointer approach 
             1st pointer - 1st 0 p 
             2nd pointer ko iterate kro if != swap       T.C = (n) S.C = (1)

Q-8 Linear Search

    OPTIMAL: T.C = (n) S.C = (1)

Q-9 Merge 2 Sorted Array

    BRUTE :  set m dalke aray return krdo                T.C = (n1logn + n2logn) + (n1+n2) S.C = (n1+n2)                                

    OPTIMAL: 2 pointer approach 
            i ko a p chalado
            j ko b p chalado till i<a.size() && j<b.size()  T.C = (n1+n2) S.C = (n1+n2)

Q-10 Intersection Of Two Sorted Arrays

    OPTIMAL: 2 pointer approach 
            i ko a p chalado
            j ko b p chalado till i<a.size() && j<b.size()  T.C = (n1+n2) S.C = (n1+n2)

Q-11 Missing Number

    BRUTE : linear Search                                      T.C = (n^2) S.C = (1)

    BETTER: using hashing                                      T.C = (n) S.C = (n)
    
    OPTIMAL: sum OR < xor  T.C = (n) S.C = (1)

Q-12 Maximum Consecutive Ones

    OPTIMAL: for loop chalado normal if else lgake max ko -1 let krke   T.C = (n1+n2) S.C = (n1+n2)

Q-13 Find The Single Element

    BRUTE : linear Search                                      T.C = (n^2) S.C = (1)

    BETTER: using hashing     OR mapping                       T.C = (3n) S.C = (max)
    
    OPTIMAL:  xor                                               T.C = (n) S.C = (1)

Q-14 Longest Subarray With Sum K

    BRUTE : generate all Subarray with sum k & take longest length     T.C = (n^2) S.C = (1)

    BETTER: samaj nahi aya                       T.C = () S.C = ()
    
    OPTIMAL:  2 pointer approach || window logic                       T.C = (2n) S.C = (1)
